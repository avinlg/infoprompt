name: Build & Publish APT repo

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: [ main ]

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Debian packaging tools
        run: sudo apt-get update && sudo apt-get install -y dpkg-dev gnupg

      - name: Build .deb
        run: |
          cd packaging
          chmod +x pack.sh
          ./pack.sh

      - name: Verify package contains /etc/profile.d wrapper (executable)
        run: |
          set -euo pipefail
          deb=$(ls packaging/infoprompt_*_all.deb | head -n1)
          echo "Checking $deb for /etc/profile.d/infoprompt.sh (executable)"
          # Find the line for the wrapper and check for x in permissions
          dpkg-deb -c "$deb" | awk '{print $1,$6}' | grep 'profile.d/infoprompt.sh$' | grep -q 'x' || (dpkg-deb -c "$deb" && echo 'Wrapper not executable or missing' && exit 1)

      - name: Create repo and include package
        run: |
          mkdir -p repo/conf repo/pool
          printf '%s\n' \
            'Origin: infoprompt' \
            'Label: infoprompt' \
            'Codename: stable' \
            'Architectures: all' \
            'Components: main' \
            'SignWith: false' \
            > repo/conf/distributions
          # Put the .deb into the pool and generate Packages/Packages.gz and Release
          mkdir -p repo/pool/main/i/infoprompt
          # copy the .deb produced by packaging/pack.sh into the pool
          cp packaging/infoprompt_*_all.deb repo/pool/main/i/infoprompt/
          # Generate Packages file and gzip it
          mkdir -p repo/dists/stable/main/binary-all
          dpkg-scanpackages repo/pool /dev/null > repo/dists/stable/main/binary-all/Packages
          gzip -9 -c repo/dists/stable/main/binary-all/Packages > repo/dists/stable/main/binary-all/Packages.gz
          # Create Release file with proper Checksums-Sha256 entries
          printf '%s\n' \
            'Origin: infoprompt' \
            'Label: infoprompt' \
            'Suite: stable' \
            'Codename: stable' \
            'Architectures: amd64 all' \
            'Components: main' \
            "Date: $(date -R)" \
            'Description: infoprompt apt repository' \
            > repo/dists/stable/Release
          # Add Checksums-Sha256 entries for Packages and Packages.gz
          printf 'SHA256:\n' >> repo/dists/stable/Release
          for f in repo/dists/stable/main/binary-all/Packages repo/dists/stable/main/binary-all/Packages.gz; do
            if [ -f "$f" ]; then
              sha256=$(sha256sum "$f" | cut -d' ' -f1)
              size=$(stat -c%s "$f")
              base=${f#repo/dists/stable/}
              printf ' %s %s %s\n' "$sha256" "$size" "$base" >> repo/dists/stable/Release
            fi
          done
          # Also publish the Packages file under binary-amd64 so apt (amd64) can find it
          mkdir -p repo/dists/stable/main/binary-amd64
          if [ -f repo/dists/stable/main/binary-all/Packages ]; then
            cp repo/dists/stable/main/binary-all/Packages repo/dists/stable/main/binary-amd64/Packages
          fi
          if [ -f repo/dists/stable/main/binary-all/Packages.gz ]; then
            cp repo/dists/stable/main/binary-all/Packages.gz repo/dists/stable/main/binary-amd64/Packages.gz
          fi

      - name: Import GPG key and sign Release
        env:
          APT_GPG_PRIVATE_KEY: ${{ secrets.APT_GPG_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${APT_GPG_PRIVATE_KEY:-}" ]; then
            echo "No APT_GPG_PRIVATE_KEY provided; skipping signing"
            exit 0
          fi
          # Import private key
          echo "$APT_GPG_PRIVATE_KEY" | gpg --batch --import
          # Extract primary key ID (long keyid/fingerprint) from secret keys
          GPG_KEY_ID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/ {print $5; exit}')
          echo "Using GPG key ID: $GPG_KEY_ID"
          # Export public key for users
          gpg --armor --export "$GPG_KEY_ID" > repo/infoprompt.gpg
          # Create signed InRelease (clear-signed) and detached Release.gpg (fail on error)
          if [ -f repo/dists/stable/Release ]; then
            gpg --batch --yes --digest-algo SHA256 --default-key "$GPG_KEY_ID" --clearsign -o repo/dists/stable/InRelease repo/dists/stable/Release
            gpg --batch --yes --digest-algo SHA256 --default-key "$GPG_KEY_ID" --detach-sign -a -o repo/dists/stable/Release.gpg repo/dists/stable/Release
          fi

      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
